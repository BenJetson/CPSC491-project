version: "3.9"

services:
  db:
    container_name: db
    hostname: postgres
    image: postgres:13
    restart: always
    volumes:
      - persistent-dbstore:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  flyway:
    # See also: https://stackoverflow.com/a/55264711
    container_name: flyway
    image: flyway/flyway
    command: >
      -url=jdbc:postgresql://db:5432/app -schemas=public -user=postgres
      -password=postgres -connectRetries=60 migrate
    volumes:
      - ./db/migrations:/flyway/sql
    depends_on:
      - db

  testdb:
    container_name: testdb
    hostname: testdb
    image: postgres:13
    environment:
      - POSTGRES_DB=app_template
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpass
    profiles:
      - testdb
    ports:
      - 5432:5432

  flyway-testdb:
    container_name: flyway-testdb
    image: flyway/flyway
    command: >
      -url=jdbc:postgresql://testdb:5432/app_template -schemas=public
      -user=testuser -password=testpass -connectRetries=60 migrate
    volumes:
      - ./db/migrations:/flyway/sql
    depends_on:
      - testdb
    profiles:
      - testdb

  pgadmin:
    container_name: pgadmin
    restart: unless-stopped
    build:
      context: ./db
      dockerfile: Dockerfile-pgadmin
    environment:
      - PGADMIN_LISTEN_PORT=5050
      - PGADMIN_DEFAULT_EMAIL=admin@postgres.local
      - PGADMIN_DEFAULT_PASSWORD=postgres
      # Send the pgAdmin access logs to the null device to reduce noise.
      - GUNICORN_ACCESS_LOGFILE=/dev/null
      # Only log critical pgAdmin errors; these usually do not concern us.
      - PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=50
    ports:
      - 5050:5050
    depends_on:
      - flyway
    links:
      - db
    tty: true
    volumes:
      - ./db/docker/servers.json:/pgadmin4/servers.json
      - persistent-pgadmin-root:/root/.pgadmin
      - persistent-pgadmin-var:/var/lib/pgadmin/

  webapp:
    container_name: webapp
    image: node:lts-buster
    working_dir: /mnt/app
    command: /bin/bash -c "yarn && yarn start"
    # ports:
    #   - 3000:3000
    volumes:
      - ./web/:/mnt/app/
      # We need to keep the node modules in the container separate from the
      # modules on the host, since they likely are different operating systems.
      - persistent-node-modules:/mnt/app/node_modules/

  storybook:
    container_name: storybook
    image: node:lts-buster
    working_dir: /mnt/app
    command: /bin/bash -c "yarn && yarn storybook"
    ports:
      - 6006:6006
    volumes:
      - ./web/:/mnt/app/
      # We need to keep the node modules in the container separate from the
      # modules on the host, since they likely are different operating systems.
      - persistent-node-modules:/mnt/app/node_modules/
    profiles:
      - storybook

  api:
    container_name: api
    hostname: api
    build:
      context: ./go
      dockerfile: Dockerfile
    working_dir: /mnt/project
    volumes:
      - ./go:/mnt/project
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=app
      - DB_USER=postgres
      - DB_PASS=postgres
      # This will not be used in the production tier, but on local computers
      # in Docker this must be set.
      - DB_DANGER_DISABLE_TLS=accept danger and use unencrypted connection
      - TIER=local
      - PORT=8080
      # This will pass through the environment variable from the host computer
      # to the container at the time of running "make" or "docker-compose up".
      - ETSY_API_KEY

  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:stable
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 8000:80

  mail:
    container_name: mail
    image: mailhog/mailhog
    logging:
      driver: none
    ports:
      - 8025:8025

volumes:
  persistent-dbstore:
    # this volume stores the database contents, so that they will persist across
    # container rebuilds unless destroyed.
  persistent-pgadmin-root:
    # this volume stores some pgAdmin internal data, which most notably serves
    # to let it remember the database password and CSRF tokens across container
    # rebuilds.
  persistent-pgadmin-var:
    # this volume stores some pgAdmin internal data, which most notably serves
    # to let it remember the database password and CSRF tokens across container
    # rebuilds.
  persistent-node-modules:
    # this volume persists the node modules across container rebuilds.
