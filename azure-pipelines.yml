trigger:
  - main
  - develop
  - feature/*
  - bugfix/*
  - hotfix/*
  - release/*

stages:
  - stage: Lint
    jobs:
      - job: LintGo
        displayName: Lint Go
        steps:
          - task: GoTool@0
            displayName: Install Go
            inputs:
              version: "1.15"
          - script: |
              curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
              sh -s -- -b $(go env GOPATH)/bin v1.35.2 && \
              echo '##vso[task.prependpath]$(HOME)/go/bin'
            displayName: Install golangci-lint
          - script: golangci-lint run
            workingDirectory: go/app
            displayName: Run golangci-lint

      - job: LintJS
        displayName: Lint JavaScript
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "14.x"
            displayName: Install Node.js
          - task: Cache@2
            inputs:
              key: 'yarn | "$(Agent.OS)" | web/yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: web/node_modules
            displayName: Cache Node Modules (yarn)
            timeoutInMinutes: 5
          - script: yarn install
            workingDirectory: web
            displayName: Install Node packages (yarn)
          - script: npx eslint .
            workingDirectory: web
            displayName: Run eslint

      - job: LintPrettier
        displayName: Lint Prettier
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "14.x"
            displayName: Install Node.js
          - script: npx prettier --check .
            displayName: Check Prettier Compliance

  - stage: Test
    jobs:
      - job: TestGo
        displayName: Test Go
        steps:
          - task: GoTool@0
            displayName: Install Go
            inputs:
              version: "1.15"
          - task: Go@0
            displayName: Test Go
            inputs:
              command: "test"
              workingDirectory: go/app

  - stage: Build
    jobs:
      - job: BuildGo
        displayName: Build API Server (Go)
        steps:
          - task: GoTool@0
            displayName: Install Go
            inputs:
              version: "1.15"
          - task: Go@0
            displayName: Go Build
            inputs:
              command: "build"
              workingDirectory: go/app/cmd/api
          - publish: $(System.DefaultWorkingDirectory)/go/app/cmd/api/api
            artifact: APIServer

      - job: BuildJS
        displayName: Build React App (JS)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "14.x"
            displayName: Install Node.js
          - task: Cache@2
            inputs:
              key: 'yarn | "$(Agent.OS)" | web/yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: web/node_modules
            displayName: Cache Node Modules (yarn)
            timeoutInMinutes: 5
          - script: yarn install
            workingDirectory: web
            displayName: Install Node packages (yarn)
          - script: yarn build
            workingDirectory: web
            displayName: React Build
          - publish: $(System.DefaultWorkingDirectory)/web/build
            artifact: ReactApp

      - job: BuildDB
        displayName: Build Database
        steps:
          # Could potentially add steps here to generate SchemaSpy docs.
          # However, for now, this will just artifact the database migrations.
          - publish: $(System.DefaultWorkingDirectory)/db/migrations
            artifact: DBMigrations

  - stage: Deploy
    jobs:
      - job: DeployDB
        steps:
          - download: current
            artifact: DBMigrations
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: Webserver
              sourceFolder: $(Pipeline.Workspace)/DBMigrations
              targetFolder: /home/deployer/DBMigrations
              cleanTargetFolder: true
              failOnEmptySource: true
          - task: SSH@0
            inputs:
              sshEndpoint: Webserver
              runOptions: inline
              inline: |
                cd DBMigrations
                flyway # FIXME
                # flyway \
                #   -url=jdbc:postgresql://$(DB_HOST):$(DB_PORT)/$(DB_DATABASE) \
                #   -schemas=public \
                #   -user=$(DB_USER) \
                #   -password=$(DB_PASS) \
                #   -connectRetries=60 \
                #   migrate

      - job: DeployAPI
        steps:
          - download: current
            artifact: APIServer
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: Webserver
              sourceFolder: $(Pipeline.Workspace)/APIServer
              targetFolder: /home/deployer/APIServer
              cleanTargetFolder: true
              failOnEmptySource: true
          - task: SSH@0
            inputs:
              sshEndpoint: Webserver
              runOptions: inline
              inline: |
                sudo systemctl stop api-dev
                cp ~/APIServer/api /usr/local/bin/api-dev
                chown -R deployer:application /usr/local/bin/api-dev
                chmod +x /usr/local/bin/api-dev
                sudo systemctl start api-dev

      - job: DeployReactApp
        steps:
          - download: current
            artifact: ReactApp
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: Webserver
              sourceFolder: $(Pipeline.Workspace)/ReactApp
              targetFolder: /home/deployer/ReactApp
              cleanTargetFolder: true
              failOnEmptySource: true
          - task: SSH@0
            inputs:
              sshEndpoint: Webserver
              runOptions: inline
              inline: |
                rm -rf /var/www/dev/*
                cp -r ~/ReactApp/* /var/www/dev
                chown -R deployer:application /var/www/dev/*
