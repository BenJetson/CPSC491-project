trigger:
  - main
  - develop
  - feature/*
  - bugfix/*
  - hotfix/*
  - release/*
  - "*"

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isDevelop: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  nonProd: $[eq(variables['isMain'], 'False')]

stages:
  - stage: Lint
    jobs:
      - job: LintGo
        displayName: Lint Go
        steps:
          - task: GoTool@0
            displayName: Install Go
            inputs:
              version: "1.15"
          - script: |
              curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
              sh -s -- -b $(go env GOPATH)/bin v1.35.2 && \
              echo '##vso[task.prependpath]$(HOME)/go/bin'
            displayName: Install golangci-lint
          - script: golangci-lint run
            workingDirectory: go/app
            displayName: Run golangci-lint

      - job: LintJS
        displayName: Lint JavaScript
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "14.x"
            displayName: Install Node.js
          - task: Cache@2
            inputs:
              key: 'yarn | "$(Agent.OS)" | web/yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: web/node_modules
            displayName: Cache Node Modules (yarn)
            timeoutInMinutes: 5
          - script: yarn install
            workingDirectory: web
            displayName: Install Node packages (yarn)
          - script: npx eslint --max-warnings=0 .
            workingDirectory: web
            displayName: Run eslint

      - job: LintPrettier
        displayName: Lint Prettier
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "14.x"
            displayName: Install Node.js
          - script: npx prettier --check .
            displayName: Check Prettier Compliance

  - stage: Test
    jobs:
      - job: TestGo
        displayName: Test Go
        steps:
          - task: GoTool@0
            displayName: Install Go
            inputs:
              version: "1.15"
          - script: |
              mkdir -p /tmp/gotestsum
              cd /tmp/gotestsum
              curl -sSfL -o gotestsum.tar.gz \
                https://github.com/gotestyourself/gotestsum/releases/download/v1.6.2/gotestsum_1.6.2_linux_amd64.tar.gz
              tar xvzf gotestsum.tar.gz
              sudo mv gotestsum /usr/local/bin/gotestsum
              cd /tmp
              rm -rf /tmp/gotestsum
            displayName: Install Tools
          - script: make testgo
            displayName: Run Tests

  - stage: Build
    jobs:
      - job: BuildGo
        displayName: Build API Server (Go)
        steps:
          - task: GoTool@0
            displayName: Install Go
            inputs:
              version: "1.15"
          - task: Go@0
            displayName: Go Build
            inputs:
              command: "build"
              workingDirectory: go/app/cmd/api
          - publish: $(System.DefaultWorkingDirectory)/go/app/cmd/api/api
            artifact: APIServer
            displayName: Publish Build Artifact

      - job: BuildJS
        displayName: Build React App (JS)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "14.x"
            displayName: Install Node.js
          - task: Cache@2
            inputs:
              key: 'yarn | "$(Agent.OS)" | web/yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: web/node_modules
            displayName: Cache Node Modules (yarn)
            timeoutInMinutes: 5
          - script: yarn install
            workingDirectory: web
            displayName: Install Node packages (yarn)
          - script: yarn build
            workingDirectory: web
            displayName: React Build
          - publish: $(System.DefaultWorkingDirectory)/web/build
            artifact: ReactApp
            displayName: Publish Build Artifact

      - job: BuildDB
        displayName: Build Database
        steps:
          # Could potentially add steps here to generate SchemaSpy docs.
          # However, for now, this will just artifact the database migrations.
          - publish: $(System.DefaultWorkingDirectory)/db/migrations
            artifact: DBMigrations
            displayName: Publish Build Artifact

  - stage: Deploy
    condition: or(eq(variables.isMain, true), eq(variables.isDevelop, true))
    jobs:
      - job: DeployDB
        displayName: Deploy Database
        steps:
          - download: current
            artifact: DBMigrations
            displayName: Download Build
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: Webserver
              sourceFolder: $(Pipeline.Workspace)/DBMigrations
              targetFolder: /home/deployer/DBMigrations-$(Build.BuildId)
              cleanTargetFolder: true
              failOnEmptySource: true
            displayName: Copy Files to Webserver
          - task: SSH@0
            inputs:
              sshEndpoint: Webserver
              runOptions: inline
              inline: |
                export TIER=`[ '$(isMain)' = 'True' ] && echo 'prod' || echo 'dev'`
                (
                  flock -x -w 300 200 || exit 1

                  # Cleanup Trap
                  trap "cd; rm -rf ~/DBMigrations-$(Build.BuildId)" \
                    SIGINT SIGTERM ERR EXIT

                  cd ~/DBMigrations-$(Build.BuildId)
                  export DB_DATABASE="$TIER"
                  timeout -k 5m 5m flyway \
                    -url="jdbc:postgresql://$(DB_HOST):$(DB_PORT)/$DB_DATABASE" \
                    -schemas=public \
                    -user="$(DB_USER)" \
                    -password="$(DB_PASS)" \
                    -connectRetries=60 \
                    -locations="filesystem:." \
                    migrate
                ) 200>"/home/deployer/lock-$TIER"
            displayName: Migrate Database (Flyway)
            env:
              DB_HOST: $(DB_HOST)
              DB_PORT: $(DB_PORT)
              DB_USER: $(DB_USER)
              DB_PASS: $(DB_PASS)
              IS_PROD: $(isMain)
              IS_DEV: $(isDevelop)
              NON_PROD: $(nonProd)

      - job: DeployAPI
        displayName: Deploy API Service
        dependsOn:
          - DeployDB
        steps:
          - download: current
            artifact: APIServer
            displayName: Download Build
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: Webserver
              sourceFolder: $(Pipeline.Workspace)/APIServer
              targetFolder: /home/deployer/APIServer-$(Build.BuildId)
              cleanTargetFolder: true
              failOnEmptySource: true
            displayName: Copy Files to Webserver
          - task: SSH@0
            inputs:
              sshEndpoint: Webserver
              runOptions: inline
              inline: |
                export TIER=`[ '$(isMain)' = 'True' ] && echo 'prod' || echo 'dev'`
                (
                  flock -x -w 300 200 || exit 1

                  # Cleanup Trap
                  trap "cd; rm -rf ~/APIServer-$(Build.BuildId)" \
                    SIGINT SIGTERM ERR EXIT

                  sudo systemctl stop "api-$TIER"
                  cp ~/APIServer-$(Build.BuildId)/api "/usr/local/bin/api-$TIER"
                  chown -R deployer:application "/usr/local/bin/api-$TIER"
                  chmod +x "/usr/local/bin/api-$TIER"
                  sudo systemctl start "api-$TIER"
                ) 200>"/home/deployer/lock-$TIER"
            displayName: Upgrade API Service

      - job: DeployReactApp
        displayName: Deploy React App
        dependsOn:
          - DeployAPI
        steps:
          - download: current
            artifact: ReactApp
            displayName: Download Build
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: Webserver
              sourceFolder: $(Pipeline.Workspace)/ReactApp
              targetFolder: /home/deployer/ReactApp-$(Build.BuildId)
              cleanTargetFolder: true
              failOnEmptySource: true
            displayName: Copy Files to Webserver
          - task: SSH@0
            inputs:
              sshEndpoint: Webserver
              runOptions: inline
              inline: |
                export TIER=`[ '$(isMain)' = 'True' ] && echo 'prod' || echo 'dev'`
                (
                  flock -x -w 300 200 || exit 1

                  # Cleanup Trap
                  trap "cd; rm -rf ~/ReactApp-$(Build.BuildId)" \
                    SIGINT SIGTERM ERR EXIT

                  rm -rf "/var/www/$TIER"/*
                  cp -r ~/ReactApp-$(Build.BuildId)/* "/var/www/$TIER"
                  chown -R deployer:application "/var/www/$TIER"/*
                ) 200>"/home/deployer/lock-$TIER"
            displayName: Replace Web Root
